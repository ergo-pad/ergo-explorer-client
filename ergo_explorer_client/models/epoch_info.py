# coding: utf-8

"""
    Ergo Explorer API v1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EpochInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'height': 'int',
        'storage_fee_factor': 'int',
        'min_value_per_byte': 'int',
        'max_block_size': 'int',
        'max_block_cost': 'int',
        'block_version': 'int',
        'token_access_cost': 'int',
        'input_cost': 'int',
        'data_input_cost': 'int',
        'output_cost': 'int'
    }

    attribute_map = {
        'height': 'height',
        'storage_fee_factor': 'storageFeeFactor',
        'min_value_per_byte': 'minValuePerByte',
        'max_block_size': 'maxBlockSize',
        'max_block_cost': 'maxBlockCost',
        'block_version': 'blockVersion',
        'token_access_cost': 'tokenAccessCost',
        'input_cost': 'inputCost',
        'data_input_cost': 'dataInputCost',
        'output_cost': 'outputCost'
    }

    def __init__(self, height=None, storage_fee_factor=None, min_value_per_byte=None, max_block_size=None, max_block_cost=None, block_version=None, token_access_cost=None, input_cost=None, data_input_cost=None, output_cost=None):  # noqa: E501
        """EpochInfo - a model defined in Swagger"""  # noqa: E501
        self._height = None
        self._storage_fee_factor = None
        self._min_value_per_byte = None
        self._max_block_size = None
        self._max_block_cost = None
        self._block_version = None
        self._token_access_cost = None
        self._input_cost = None
        self._data_input_cost = None
        self._output_cost = None
        self.discriminator = None
        self.height = height
        self.storage_fee_factor = storage_fee_factor
        self.min_value_per_byte = min_value_per_byte
        self.max_block_size = max_block_size
        self.max_block_cost = max_block_cost
        self.block_version = block_version
        self.token_access_cost = token_access_cost
        self.input_cost = input_cost
        self.data_input_cost = data_input_cost
        self.output_cost = output_cost

    @property
    def height(self):
        """Gets the height of this EpochInfo.  # noqa: E501


        :return: The height of this EpochInfo.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this EpochInfo.


        :param height: The height of this EpochInfo.  # noqa: E501
        :type: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501

        self._height = height

    @property
    def storage_fee_factor(self):
        """Gets the storage_fee_factor of this EpochInfo.  # noqa: E501


        :return: The storage_fee_factor of this EpochInfo.  # noqa: E501
        :rtype: int
        """
        return self._storage_fee_factor

    @storage_fee_factor.setter
    def storage_fee_factor(self, storage_fee_factor):
        """Sets the storage_fee_factor of this EpochInfo.


        :param storage_fee_factor: The storage_fee_factor of this EpochInfo.  # noqa: E501
        :type: int
        """
        if storage_fee_factor is None:
            raise ValueError("Invalid value for `storage_fee_factor`, must not be `None`")  # noqa: E501

        self._storage_fee_factor = storage_fee_factor

    @property
    def min_value_per_byte(self):
        """Gets the min_value_per_byte of this EpochInfo.  # noqa: E501


        :return: The min_value_per_byte of this EpochInfo.  # noqa: E501
        :rtype: int
        """
        return self._min_value_per_byte

    @min_value_per_byte.setter
    def min_value_per_byte(self, min_value_per_byte):
        """Sets the min_value_per_byte of this EpochInfo.


        :param min_value_per_byte: The min_value_per_byte of this EpochInfo.  # noqa: E501
        :type: int
        """
        if min_value_per_byte is None:
            raise ValueError("Invalid value for `min_value_per_byte`, must not be `None`")  # noqa: E501

        self._min_value_per_byte = min_value_per_byte

    @property
    def max_block_size(self):
        """Gets the max_block_size of this EpochInfo.  # noqa: E501


        :return: The max_block_size of this EpochInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_block_size

    @max_block_size.setter
    def max_block_size(self, max_block_size):
        """Sets the max_block_size of this EpochInfo.


        :param max_block_size: The max_block_size of this EpochInfo.  # noqa: E501
        :type: int
        """
        if max_block_size is None:
            raise ValueError("Invalid value for `max_block_size`, must not be `None`")  # noqa: E501

        self._max_block_size = max_block_size

    @property
    def max_block_cost(self):
        """Gets the max_block_cost of this EpochInfo.  # noqa: E501


        :return: The max_block_cost of this EpochInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_block_cost

    @max_block_cost.setter
    def max_block_cost(self, max_block_cost):
        """Sets the max_block_cost of this EpochInfo.


        :param max_block_cost: The max_block_cost of this EpochInfo.  # noqa: E501
        :type: int
        """
        if max_block_cost is None:
            raise ValueError("Invalid value for `max_block_cost`, must not be `None`")  # noqa: E501

        self._max_block_cost = max_block_cost

    @property
    def block_version(self):
        """Gets the block_version of this EpochInfo.  # noqa: E501


        :return: The block_version of this EpochInfo.  # noqa: E501
        :rtype: int
        """
        return self._block_version

    @block_version.setter
    def block_version(self, block_version):
        """Sets the block_version of this EpochInfo.


        :param block_version: The block_version of this EpochInfo.  # noqa: E501
        :type: int
        """
        if block_version is None:
            raise ValueError("Invalid value for `block_version`, must not be `None`")  # noqa: E501

        self._block_version = block_version

    @property
    def token_access_cost(self):
        """Gets the token_access_cost of this EpochInfo.  # noqa: E501


        :return: The token_access_cost of this EpochInfo.  # noqa: E501
        :rtype: int
        """
        return self._token_access_cost

    @token_access_cost.setter
    def token_access_cost(self, token_access_cost):
        """Sets the token_access_cost of this EpochInfo.


        :param token_access_cost: The token_access_cost of this EpochInfo.  # noqa: E501
        :type: int
        """
        if token_access_cost is None:
            raise ValueError("Invalid value for `token_access_cost`, must not be `None`")  # noqa: E501

        self._token_access_cost = token_access_cost

    @property
    def input_cost(self):
        """Gets the input_cost of this EpochInfo.  # noqa: E501


        :return: The input_cost of this EpochInfo.  # noqa: E501
        :rtype: int
        """
        return self._input_cost

    @input_cost.setter
    def input_cost(self, input_cost):
        """Sets the input_cost of this EpochInfo.


        :param input_cost: The input_cost of this EpochInfo.  # noqa: E501
        :type: int
        """
        if input_cost is None:
            raise ValueError("Invalid value for `input_cost`, must not be `None`")  # noqa: E501

        self._input_cost = input_cost

    @property
    def data_input_cost(self):
        """Gets the data_input_cost of this EpochInfo.  # noqa: E501


        :return: The data_input_cost of this EpochInfo.  # noqa: E501
        :rtype: int
        """
        return self._data_input_cost

    @data_input_cost.setter
    def data_input_cost(self, data_input_cost):
        """Sets the data_input_cost of this EpochInfo.


        :param data_input_cost: The data_input_cost of this EpochInfo.  # noqa: E501
        :type: int
        """
        if data_input_cost is None:
            raise ValueError("Invalid value for `data_input_cost`, must not be `None`")  # noqa: E501

        self._data_input_cost = data_input_cost

    @property
    def output_cost(self):
        """Gets the output_cost of this EpochInfo.  # noqa: E501


        :return: The output_cost of this EpochInfo.  # noqa: E501
        :rtype: int
        """
        return self._output_cost

    @output_cost.setter
    def output_cost(self, output_cost):
        """Sets the output_cost of this EpochInfo.


        :param output_cost: The output_cost of this EpochInfo.  # noqa: E501
        :type: int
        """
        if output_cost is None:
            raise ValueError("Invalid value for `output_cost`, must not be `None`")  # noqa: E501

        self._output_cost = output_cost

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EpochInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EpochInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
