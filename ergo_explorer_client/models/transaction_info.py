# coding: utf-8

"""
    Ergo Explorer API v1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransactionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'block_id': 'str',
        'inclusion_height': 'int',
        'timestamp': 'int',
        'index': 'int',
        'global_index': 'int',
        'num_confirmations': 'int',
        'inputs': 'list[InputInfo]',
        'data_inputs': 'list[DataInputInfo]',
        'outputs': 'list[OutputInfo]',
        'size': 'int'
    }

    attribute_map = {
        'id': 'id',
        'block_id': 'blockId',
        'inclusion_height': 'inclusionHeight',
        'timestamp': 'timestamp',
        'index': 'index',
        'global_index': 'globalIndex',
        'num_confirmations': 'numConfirmations',
        'inputs': 'inputs',
        'data_inputs': 'dataInputs',
        'outputs': 'outputs',
        'size': 'size'
    }

    def __init__(self, id=None, block_id=None, inclusion_height=None, timestamp=None, index=None, global_index=None, num_confirmations=None, inputs=None, data_inputs=None, outputs=None, size=None):  # noqa: E501
        """TransactionInfo - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._block_id = None
        self._inclusion_height = None
        self._timestamp = None
        self._index = None
        self._global_index = None
        self._num_confirmations = None
        self._inputs = None
        self._data_inputs = None
        self._outputs = None
        self._size = None
        self.discriminator = None
        self.id = id
        self.block_id = block_id
        self.inclusion_height = inclusion_height
        self.timestamp = timestamp
        self.index = index
        self.global_index = global_index
        self.num_confirmations = num_confirmations
        if inputs is not None:
            self.inputs = inputs
        if data_inputs is not None:
            self.data_inputs = data_inputs
        if outputs is not None:
            self.outputs = outputs
        self.size = size

    @property
    def id(self):
        """Gets the id of this TransactionInfo.  # noqa: E501

        Transaction ID  # noqa: E501

        :return: The id of this TransactionInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransactionInfo.

        Transaction ID  # noqa: E501

        :param id: The id of this TransactionInfo.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def block_id(self):
        """Gets the block_id of this TransactionInfo.  # noqa: E501

        ID of the corresponding header  # noqa: E501

        :return: The block_id of this TransactionInfo.  # noqa: E501
        :rtype: str
        """
        return self._block_id

    @block_id.setter
    def block_id(self, block_id):
        """Sets the block_id of this TransactionInfo.

        ID of the corresponding header  # noqa: E501

        :param block_id: The block_id of this TransactionInfo.  # noqa: E501
        :type: str
        """
        if block_id is None:
            raise ValueError("Invalid value for `block_id`, must not be `None`")  # noqa: E501

        self._block_id = block_id

    @property
    def inclusion_height(self):
        """Gets the inclusion_height of this TransactionInfo.  # noqa: E501

        Height of the block the transaction was included in  # noqa: E501

        :return: The inclusion_height of this TransactionInfo.  # noqa: E501
        :rtype: int
        """
        return self._inclusion_height

    @inclusion_height.setter
    def inclusion_height(self, inclusion_height):
        """Sets the inclusion_height of this TransactionInfo.

        Height of the block the transaction was included in  # noqa: E501

        :param inclusion_height: The inclusion_height of this TransactionInfo.  # noqa: E501
        :type: int
        """
        if inclusion_height is None:
            raise ValueError("Invalid value for `inclusion_height`, must not be `None`")  # noqa: E501

        self._inclusion_height = inclusion_height

    @property
    def timestamp(self):
        """Gets the timestamp of this TransactionInfo.  # noqa: E501

        Timestamp the transaction got into the network  # noqa: E501

        :return: The timestamp of this TransactionInfo.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this TransactionInfo.

        Timestamp the transaction got into the network  # noqa: E501

        :param timestamp: The timestamp of this TransactionInfo.  # noqa: E501
        :type: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def index(self):
        """Gets the index of this TransactionInfo.  # noqa: E501

        Index of a transaction inside a block  # noqa: E501

        :return: The index of this TransactionInfo.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this TransactionInfo.

        Index of a transaction inside a block  # noqa: E501

        :param index: The index of this TransactionInfo.  # noqa: E501
        :type: int
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")  # noqa: E501

        self._index = index

    @property
    def global_index(self):
        """Gets the global_index of this TransactionInfo.  # noqa: E501

        global index of a transaction in the blockchain  # noqa: E501

        :return: The global_index of this TransactionInfo.  # noqa: E501
        :rtype: int
        """
        return self._global_index

    @global_index.setter
    def global_index(self, global_index):
        """Sets the global_index of this TransactionInfo.

        global index of a transaction in the blockchain  # noqa: E501

        :param global_index: The global_index of this TransactionInfo.  # noqa: E501
        :type: int
        """
        if global_index is None:
            raise ValueError("Invalid value for `global_index`, must not be `None`")  # noqa: E501

        self._global_index = global_index

    @property
    def num_confirmations(self):
        """Gets the num_confirmations of this TransactionInfo.  # noqa: E501

        Number of transaction confirmations  # noqa: E501

        :return: The num_confirmations of this TransactionInfo.  # noqa: E501
        :rtype: int
        """
        return self._num_confirmations

    @num_confirmations.setter
    def num_confirmations(self, num_confirmations):
        """Sets the num_confirmations of this TransactionInfo.

        Number of transaction confirmations  # noqa: E501

        :param num_confirmations: The num_confirmations of this TransactionInfo.  # noqa: E501
        :type: int
        """
        if num_confirmations is None:
            raise ValueError("Invalid value for `num_confirmations`, must not be `None`")  # noqa: E501

        self._num_confirmations = num_confirmations

    @property
    def inputs(self):
        """Gets the inputs of this TransactionInfo.  # noqa: E501


        :return: The inputs of this TransactionInfo.  # noqa: E501
        :rtype: list[InputInfo]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this TransactionInfo.


        :param inputs: The inputs of this TransactionInfo.  # noqa: E501
        :type: list[InputInfo]
        """

        self._inputs = inputs

    @property
    def data_inputs(self):
        """Gets the data_inputs of this TransactionInfo.  # noqa: E501


        :return: The data_inputs of this TransactionInfo.  # noqa: E501
        :rtype: list[DataInputInfo]
        """
        return self._data_inputs

    @data_inputs.setter
    def data_inputs(self, data_inputs):
        """Sets the data_inputs of this TransactionInfo.


        :param data_inputs: The data_inputs of this TransactionInfo.  # noqa: E501
        :type: list[DataInputInfo]
        """

        self._data_inputs = data_inputs

    @property
    def outputs(self):
        """Gets the outputs of this TransactionInfo.  # noqa: E501


        :return: The outputs of this TransactionInfo.  # noqa: E501
        :rtype: list[OutputInfo]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this TransactionInfo.


        :param outputs: The outputs of this TransactionInfo.  # noqa: E501
        :type: list[OutputInfo]
        """

        self._outputs = outputs

    @property
    def size(self):
        """Gets the size of this TransactionInfo.  # noqa: E501

        Transaction size in bytes  # noqa: E501

        :return: The size of this TransactionInfo.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this TransactionInfo.

        Transaction size in bytes  # noqa: E501

        :param size: The size of this TransactionInfo.  # noqa: E501
        :type: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
