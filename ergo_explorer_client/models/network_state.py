# coding: utf-8

"""
    Ergo Explorer API v1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetworkState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_block_id': 'str',
        'height': 'int',
        'max_box_gix': 'int',
        'max_tx_gix': 'int',
        'params': 'EpochInfo'
    }

    attribute_map = {
        'last_block_id': 'lastBlockId',
        'height': 'height',
        'max_box_gix': 'maxBoxGix',
        'max_tx_gix': 'maxTxGix',
        'params': 'params'
    }

    def __init__(self, last_block_id=None, height=None, max_box_gix=None, max_tx_gix=None, params=None):  # noqa: E501
        """NetworkState - a model defined in Swagger"""  # noqa: E501
        self._last_block_id = None
        self._height = None
        self._max_box_gix = None
        self._max_tx_gix = None
        self._params = None
        self.discriminator = None
        self.last_block_id = last_block_id
        self.height = height
        self.max_box_gix = max_box_gix
        self.max_tx_gix = max_tx_gix
        self.params = params

    @property
    def last_block_id(self):
        """Gets the last_block_id of this NetworkState.  # noqa: E501

        Modifier ID  # noqa: E501

        :return: The last_block_id of this NetworkState.  # noqa: E501
        :rtype: str
        """
        return self._last_block_id

    @last_block_id.setter
    def last_block_id(self, last_block_id):
        """Sets the last_block_id of this NetworkState.

        Modifier ID  # noqa: E501

        :param last_block_id: The last_block_id of this NetworkState.  # noqa: E501
        :type: str
        """
        if last_block_id is None:
            raise ValueError("Invalid value for `last_block_id`, must not be `None`")  # noqa: E501

        self._last_block_id = last_block_id

    @property
    def height(self):
        """Gets the height of this NetworkState.  # noqa: E501


        :return: The height of this NetworkState.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this NetworkState.


        :param height: The height of this NetworkState.  # noqa: E501
        :type: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501

        self._height = height

    @property
    def max_box_gix(self):
        """Gets the max_box_gix of this NetworkState.  # noqa: E501


        :return: The max_box_gix of this NetworkState.  # noqa: E501
        :rtype: int
        """
        return self._max_box_gix

    @max_box_gix.setter
    def max_box_gix(self, max_box_gix):
        """Sets the max_box_gix of this NetworkState.


        :param max_box_gix: The max_box_gix of this NetworkState.  # noqa: E501
        :type: int
        """
        if max_box_gix is None:
            raise ValueError("Invalid value for `max_box_gix`, must not be `None`")  # noqa: E501

        self._max_box_gix = max_box_gix

    @property
    def max_tx_gix(self):
        """Gets the max_tx_gix of this NetworkState.  # noqa: E501


        :return: The max_tx_gix of this NetworkState.  # noqa: E501
        :rtype: int
        """
        return self._max_tx_gix

    @max_tx_gix.setter
    def max_tx_gix(self, max_tx_gix):
        """Sets the max_tx_gix of this NetworkState.


        :param max_tx_gix: The max_tx_gix of this NetworkState.  # noqa: E501
        :type: int
        """
        if max_tx_gix is None:
            raise ValueError("Invalid value for `max_tx_gix`, must not be `None`")  # noqa: E501

        self._max_tx_gix = max_tx_gix

    @property
    def params(self):
        """Gets the params of this NetworkState.  # noqa: E501


        :return: The params of this NetworkState.  # noqa: E501
        :rtype: EpochInfo
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this NetworkState.


        :param params: The params of this NetworkState.  # noqa: E501
        :type: EpochInfo
        """
        if params is None:
            raise ValueError("Invalid value for `params`, must not be `None`")  # noqa: E501

        self._params = params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
