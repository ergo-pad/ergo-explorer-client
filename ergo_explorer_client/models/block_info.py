# coding: utf-8

"""
    Ergo Explorer API v1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BlockInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'height': 'int',
        'epoch': 'int',
        'version': 'int',
        'timestamp': 'int',
        'transactions_count': 'int',
        'miner': 'MinerInfo',
        'size': 'int',
        'difficulty': 'int',
        'miner_reward': 'int'
    }

    attribute_map = {
        'id': 'id',
        'height': 'height',
        'epoch': 'epoch',
        'version': 'version',
        'timestamp': 'timestamp',
        'transactions_count': 'transactionsCount',
        'miner': 'miner',
        'size': 'size',
        'difficulty': 'difficulty',
        'miner_reward': 'minerReward'
    }

    def __init__(self, id=None, height=None, epoch=None, version=None, timestamp=None, transactions_count=None, miner=None, size=None, difficulty=None, miner_reward=None):  # noqa: E501
        """BlockInfo - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._height = None
        self._epoch = None
        self._version = None
        self._timestamp = None
        self._transactions_count = None
        self._miner = None
        self._size = None
        self._difficulty = None
        self._miner_reward = None
        self.discriminator = None
        self.id = id
        self.height = height
        self.epoch = epoch
        self.version = version
        self.timestamp = timestamp
        self.transactions_count = transactions_count
        self.miner = miner
        self.size = size
        self.difficulty = difficulty
        self.miner_reward = miner_reward

    @property
    def id(self):
        """Gets the id of this BlockInfo.  # noqa: E501

        Block ID  # noqa: E501

        :return: The id of this BlockInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BlockInfo.

        Block ID  # noqa: E501

        :param id: The id of this BlockInfo.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def height(self):
        """Gets the height of this BlockInfo.  # noqa: E501

        Block height  # noqa: E501

        :return: The height of this BlockInfo.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this BlockInfo.

        Block height  # noqa: E501

        :param height: The height of this BlockInfo.  # noqa: E501
        :type: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501

        self._height = height

    @property
    def epoch(self):
        """Gets the epoch of this BlockInfo.  # noqa: E501

        Block epoch (Epochs are enumerated from 0)  # noqa: E501

        :return: The epoch of this BlockInfo.  # noqa: E501
        :rtype: int
        """
        return self._epoch

    @epoch.setter
    def epoch(self, epoch):
        """Sets the epoch of this BlockInfo.

        Block epoch (Epochs are enumerated from 0)  # noqa: E501

        :param epoch: The epoch of this BlockInfo.  # noqa: E501
        :type: int
        """
        if epoch is None:
            raise ValueError("Invalid value for `epoch`, must not be `None`")  # noqa: E501

        self._epoch = epoch

    @property
    def version(self):
        """Gets the version of this BlockInfo.  # noqa: E501

        Block version  # noqa: E501

        :return: The version of this BlockInfo.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BlockInfo.

        Block version  # noqa: E501

        :param version: The version of this BlockInfo.  # noqa: E501
        :type: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def timestamp(self):
        """Gets the timestamp of this BlockInfo.  # noqa: E501

        Timestamp the block was created (UNIX timestamp in millis)  # noqa: E501

        :return: The timestamp of this BlockInfo.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this BlockInfo.

        Timestamp the block was created (UNIX timestamp in millis)  # noqa: E501

        :param timestamp: The timestamp of this BlockInfo.  # noqa: E501
        :type: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def transactions_count(self):
        """Gets the transactions_count of this BlockInfo.  # noqa: E501

        Number of transactions included in the block  # noqa: E501

        :return: The transactions_count of this BlockInfo.  # noqa: E501
        :rtype: int
        """
        return self._transactions_count

    @transactions_count.setter
    def transactions_count(self, transactions_count):
        """Sets the transactions_count of this BlockInfo.

        Number of transactions included in the block  # noqa: E501

        :param transactions_count: The transactions_count of this BlockInfo.  # noqa: E501
        :type: int
        """
        if transactions_count is None:
            raise ValueError("Invalid value for `transactions_count`, must not be `None`")  # noqa: E501

        self._transactions_count = transactions_count

    @property
    def miner(self):
        """Gets the miner of this BlockInfo.  # noqa: E501


        :return: The miner of this BlockInfo.  # noqa: E501
        :rtype: MinerInfo
        """
        return self._miner

    @miner.setter
    def miner(self, miner):
        """Sets the miner of this BlockInfo.


        :param miner: The miner of this BlockInfo.  # noqa: E501
        :type: MinerInfo
        """
        if miner is None:
            raise ValueError("Invalid value for `miner`, must not be `None`")  # noqa: E501

        self._miner = miner

    @property
    def size(self):
        """Gets the size of this BlockInfo.  # noqa: E501

        Overall size of the block in bytes  # noqa: E501

        :return: The size of this BlockInfo.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this BlockInfo.

        Overall size of the block in bytes  # noqa: E501

        :param size: The size of this BlockInfo.  # noqa: E501
        :type: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def difficulty(self):
        """Gets the difficulty of this BlockInfo.  # noqa: E501

        Block difficulty  # noqa: E501

        :return: The difficulty of this BlockInfo.  # noqa: E501
        :rtype: int
        """
        return self._difficulty

    @difficulty.setter
    def difficulty(self, difficulty):
        """Sets the difficulty of this BlockInfo.

        Block difficulty  # noqa: E501

        :param difficulty: The difficulty of this BlockInfo.  # noqa: E501
        :type: int
        """
        if difficulty is None:
            raise ValueError("Invalid value for `difficulty`, must not be `None`")  # noqa: E501

        self._difficulty = difficulty

    @property
    def miner_reward(self):
        """Gets the miner_reward of this BlockInfo.  # noqa: E501

        The amount of nanoErgs miner received as a reward for block  # noqa: E501

        :return: The miner_reward of this BlockInfo.  # noqa: E501
        :rtype: int
        """
        return self._miner_reward

    @miner_reward.setter
    def miner_reward(self, miner_reward):
        """Sets the miner_reward of this BlockInfo.

        The amount of nanoErgs miner received as a reward for block  # noqa: E501

        :param miner_reward: The miner_reward of this BlockInfo.  # noqa: E501
        :type: int
        """
        if miner_reward is None:
            raise ValueError("Invalid value for `miner_reward`, must not be `None`")  # noqa: E501

        self._miner_reward = miner_reward

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BlockInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
