# coding: utf-8

"""
    Ergo Explorer API v1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UTransactionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'creation_timestamp': 'int',
        'inputs': 'list[UInputInfo]',
        'data_inputs': 'list[UDataInputInfo]',
        'outputs': 'list[UOutputInfo]',
        'size': 'int'
    }

    attribute_map = {
        'id': 'id',
        'creation_timestamp': 'creationTimestamp',
        'inputs': 'inputs',
        'data_inputs': 'dataInputs',
        'outputs': 'outputs',
        'size': 'size'
    }

    def __init__(self, id=None, creation_timestamp=None, inputs=None, data_inputs=None, outputs=None, size=None):  # noqa: E501
        """UTransactionInfo - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._creation_timestamp = None
        self._inputs = None
        self._data_inputs = None
        self._outputs = None
        self._size = None
        self.discriminator = None
        self.id = id
        self.creation_timestamp = creation_timestamp
        if inputs is not None:
            self.inputs = inputs
        if data_inputs is not None:
            self.data_inputs = data_inputs
        if outputs is not None:
            self.outputs = outputs
        self.size = size

    @property
    def id(self):
        """Gets the id of this UTransactionInfo.  # noqa: E501

        Transaction ID  # noqa: E501

        :return: The id of this UTransactionInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UTransactionInfo.

        Transaction ID  # noqa: E501

        :param id: The id of this UTransactionInfo.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this UTransactionInfo.  # noqa: E501

        Timestamp the transaction got into the network  # noqa: E501

        :return: The creation_timestamp of this UTransactionInfo.  # noqa: E501
        :rtype: int
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this UTransactionInfo.

        Timestamp the transaction got into the network  # noqa: E501

        :param creation_timestamp: The creation_timestamp of this UTransactionInfo.  # noqa: E501
        :type: int
        """
        if creation_timestamp is None:
            raise ValueError("Invalid value for `creation_timestamp`, must not be `None`")  # noqa: E501

        self._creation_timestamp = creation_timestamp

    @property
    def inputs(self):
        """Gets the inputs of this UTransactionInfo.  # noqa: E501


        :return: The inputs of this UTransactionInfo.  # noqa: E501
        :rtype: list[UInputInfo]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this UTransactionInfo.


        :param inputs: The inputs of this UTransactionInfo.  # noqa: E501
        :type: list[UInputInfo]
        """

        self._inputs = inputs

    @property
    def data_inputs(self):
        """Gets the data_inputs of this UTransactionInfo.  # noqa: E501


        :return: The data_inputs of this UTransactionInfo.  # noqa: E501
        :rtype: list[UDataInputInfo]
        """
        return self._data_inputs

    @data_inputs.setter
    def data_inputs(self, data_inputs):
        """Sets the data_inputs of this UTransactionInfo.


        :param data_inputs: The data_inputs of this UTransactionInfo.  # noqa: E501
        :type: list[UDataInputInfo]
        """

        self._data_inputs = data_inputs

    @property
    def outputs(self):
        """Gets the outputs of this UTransactionInfo.  # noqa: E501


        :return: The outputs of this UTransactionInfo.  # noqa: E501
        :rtype: list[UOutputInfo]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this UTransactionInfo.


        :param outputs: The outputs of this UTransactionInfo.  # noqa: E501
        :type: list[UOutputInfo]
        """

        self._outputs = outputs

    @property
    def size(self):
        """Gets the size of this UTransactionInfo.  # noqa: E501

        Transaction size in bytes  # noqa: E501

        :return: The size of this UTransactionInfo.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this UTransactionInfo.

        Transaction size in bytes  # noqa: E501

        :param size: The size of this UTransactionInfo.  # noqa: E501
        :type: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UTransactionInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UTransactionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
