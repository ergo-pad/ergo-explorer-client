# coding: utf-8

"""
    Ergo Explorer API v1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PowSolutionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pk': 'str',
        'w': 'str',
        'n': 'str',
        'd': 'str'
    }

    attribute_map = {
        'pk': 'pk',
        'w': 'w',
        'n': 'n',
        'd': 'd'
    }

    def __init__(self, pk=None, w=None, n=None, d=None):  # noqa: E501
        """PowSolutionInfo - a model defined in Swagger"""  # noqa: E501
        self._pk = None
        self._w = None
        self._n = None
        self._d = None
        self.discriminator = None
        self.pk = pk
        self.w = w
        self.n = n
        self.d = d

    @property
    def pk(self):
        """Gets the pk of this PowSolutionInfo.  # noqa: E501

        Miner public key  # noqa: E501

        :return: The pk of this PowSolutionInfo.  # noqa: E501
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this PowSolutionInfo.

        Miner public key  # noqa: E501

        :param pk: The pk of this PowSolutionInfo.  # noqa: E501
        :type: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")  # noqa: E501

        self._pk = pk

    @property
    def w(self):
        """Gets the w of this PowSolutionInfo.  # noqa: E501

        Hex-encoded string  # noqa: E501

        :return: The w of this PowSolutionInfo.  # noqa: E501
        :rtype: str
        """
        return self._w

    @w.setter
    def w(self, w):
        """Sets the w of this PowSolutionInfo.

        Hex-encoded string  # noqa: E501

        :param w: The w of this PowSolutionInfo.  # noqa: E501
        :type: str
        """
        if w is None:
            raise ValueError("Invalid value for `w`, must not be `None`")  # noqa: E501

        self._w = w

    @property
    def n(self):
        """Gets the n of this PowSolutionInfo.  # noqa: E501

        Hex-encoded string  # noqa: E501

        :return: The n of this PowSolutionInfo.  # noqa: E501
        :rtype: str
        """
        return self._n

    @n.setter
    def n(self, n):
        """Sets the n of this PowSolutionInfo.

        Hex-encoded string  # noqa: E501

        :param n: The n of this PowSolutionInfo.  # noqa: E501
        :type: str
        """
        if n is None:
            raise ValueError("Invalid value for `n`, must not be `None`")  # noqa: E501

        self._n = n

    @property
    def d(self):
        """Gets the d of this PowSolutionInfo.  # noqa: E501

        Autolykos.d  # noqa: E501

        :return: The d of this PowSolutionInfo.  # noqa: E501
        :rtype: str
        """
        return self._d

    @d.setter
    def d(self, d):
        """Sets the d of this PowSolutionInfo.

        Autolykos.d  # noqa: E501

        :param d: The d of this PowSolutionInfo.  # noqa: E501
        :type: str
        """
        if d is None:
            raise ValueError("Invalid value for `d`, must not be `None`")  # noqa: E501

        self._d = d

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PowSolutionInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PowSolutionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
