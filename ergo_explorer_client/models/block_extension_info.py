# coding: utf-8

"""
    Ergo Explorer API v1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BlockExtensionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'header_id': 'str',
        'digest': 'str',
        'fields': 'dict(str, str)'
    }

    attribute_map = {
        'header_id': 'headerId',
        'digest': 'digest',
        'fields': 'fields'
    }

    def __init__(self, header_id=None, digest=None, fields=None):  # noqa: E501
        """BlockExtensionInfo - a model defined in Swagger"""  # noqa: E501
        self._header_id = None
        self._digest = None
        self._fields = None
        self.discriminator = None
        self.header_id = header_id
        self.digest = digest
        self.fields = fields

    @property
    def header_id(self):
        """Gets the header_id of this BlockExtensionInfo.  # noqa: E501

        ID of the corresponding header  # noqa: E501

        :return: The header_id of this BlockExtensionInfo.  # noqa: E501
        :rtype: str
        """
        return self._header_id

    @header_id.setter
    def header_id(self, header_id):
        """Sets the header_id of this BlockExtensionInfo.

        ID of the corresponding header  # noqa: E501

        :param header_id: The header_id of this BlockExtensionInfo.  # noqa: E501
        :type: str
        """
        if header_id is None:
            raise ValueError("Invalid value for `header_id`, must not be `None`")  # noqa: E501

        self._header_id = header_id

    @property
    def digest(self):
        """Gets the digest of this BlockExtensionInfo.  # noqa: E501

        Hex-encoded extension digest  # noqa: E501

        :return: The digest of this BlockExtensionInfo.  # noqa: E501
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this BlockExtensionInfo.

        Hex-encoded extension digest  # noqa: E501

        :param digest: The digest of this BlockExtensionInfo.  # noqa: E501
        :type: str
        """
        if digest is None:
            raise ValueError("Invalid value for `digest`, must not be `None`")  # noqa: E501

        self._digest = digest

    @property
    def fields(self):
        """Gets the fields of this BlockExtensionInfo.  # noqa: E501


        :return: The fields of this BlockExtensionInfo.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this BlockExtensionInfo.


        :param fields: The fields of this BlockExtensionInfo.  # noqa: E501
        :type: dict(str, str)
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")  # noqa: E501

        self._fields = fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BlockExtensionInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockExtensionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
