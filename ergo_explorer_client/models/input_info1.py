# coding: utf-8

"""
    Ergo Explorer API v1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InputInfo1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'value': 'int',
        'index': 'int',
        'spending_proof': 'str',
        'transaction_id': 'str',
        'output_transaction_id': 'str',
        'output_index': 'int',
        'address': 'str'
    }

    attribute_map = {
        'id': 'id',
        'value': 'value',
        'index': 'index',
        'spending_proof': 'spendingProof',
        'transaction_id': 'transactionId',
        'output_transaction_id': 'outputTransactionId',
        'output_index': 'outputIndex',
        'address': 'address'
    }

    def __init__(self, id=None, value=None, index=None, spending_proof=None, transaction_id=None, output_transaction_id=None, output_index=None, address=None):  # noqa: E501
        """InputInfo1 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._value = None
        self._index = None
        self._spending_proof = None
        self._transaction_id = None
        self._output_transaction_id = None
        self._output_index = None
        self._address = None
        self.discriminator = None
        self.id = id
        if value is not None:
            self.value = value
        self.index = index
        if spending_proof is not None:
            self.spending_proof = spending_proof
        self.transaction_id = transaction_id
        if output_transaction_id is not None:
            self.output_transaction_id = output_transaction_id
        if output_index is not None:
            self.output_index = output_index
        if address is not None:
            self.address = address

    @property
    def id(self):
        """Gets the id of this InputInfo1.  # noqa: E501

        ID of the corresponding box  # noqa: E501

        :return: The id of this InputInfo1.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InputInfo1.

        ID of the corresponding box  # noqa: E501

        :param id: The id of this InputInfo1.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def value(self):
        """Gets the value of this InputInfo1.  # noqa: E501

        Number of nanoErgs in the corresponding box  # noqa: E501

        :return: The value of this InputInfo1.  # noqa: E501
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InputInfo1.

        Number of nanoErgs in the corresponding box  # noqa: E501

        :param value: The value of this InputInfo1.  # noqa: E501
        :type: int
        """

        self._value = value

    @property
    def index(self):
        """Gets the index of this InputInfo1.  # noqa: E501

        Index of the input in a transaction  # noqa: E501

        :return: The index of this InputInfo1.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this InputInfo1.

        Index of the input in a transaction  # noqa: E501

        :param index: The index of this InputInfo1.  # noqa: E501
        :type: int
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")  # noqa: E501

        self._index = index

    @property
    def spending_proof(self):
        """Gets the spending_proof of this InputInfo1.  # noqa: E501

        Hex-encoded serialized sigma proof  # noqa: E501

        :return: The spending_proof of this InputInfo1.  # noqa: E501
        :rtype: str
        """
        return self._spending_proof

    @spending_proof.setter
    def spending_proof(self, spending_proof):
        """Sets the spending_proof of this InputInfo1.

        Hex-encoded serialized sigma proof  # noqa: E501

        :param spending_proof: The spending_proof of this InputInfo1.  # noqa: E501
        :type: str
        """

        self._spending_proof = spending_proof

    @property
    def transaction_id(self):
        """Gets the transaction_id of this InputInfo1.  # noqa: E501

        ID of the transaction this input was used in  # noqa: E501

        :return: The transaction_id of this InputInfo1.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this InputInfo1.

        ID of the transaction this input was used in  # noqa: E501

        :param transaction_id: The transaction_id of this InputInfo1.  # noqa: E501
        :type: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")  # noqa: E501

        self._transaction_id = transaction_id

    @property
    def output_transaction_id(self):
        """Gets the output_transaction_id of this InputInfo1.  # noqa: E501

        ID of the transaction outputting corresponding box  # noqa: E501

        :return: The output_transaction_id of this InputInfo1.  # noqa: E501
        :rtype: str
        """
        return self._output_transaction_id

    @output_transaction_id.setter
    def output_transaction_id(self, output_transaction_id):
        """Sets the output_transaction_id of this InputInfo1.

        ID of the transaction outputting corresponding box  # noqa: E501

        :param output_transaction_id: The output_transaction_id of this InputInfo1.  # noqa: E501
        :type: str
        """

        self._output_transaction_id = output_transaction_id

    @property
    def output_index(self):
        """Gets the output_index of this InputInfo1.  # noqa: E501

        Index of the output corresponding this input  # noqa: E501

        :return: The output_index of this InputInfo1.  # noqa: E501
        :rtype: int
        """
        return self._output_index

    @output_index.setter
    def output_index(self, output_index):
        """Sets the output_index of this InputInfo1.

        Index of the output corresponding this input  # noqa: E501

        :param output_index: The output_index of this InputInfo1.  # noqa: E501
        :type: int
        """

        self._output_index = output_index

    @property
    def address(self):
        """Gets the address of this InputInfo1.  # noqa: E501

        Decoded address of the corresponding box holder  # noqa: E501

        :return: The address of this InputInfo1.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InputInfo1.

        Decoded address of the corresponding box holder  # noqa: E501

        :param address: The address of this InputInfo1.  # noqa: E501
        :type: str
        """

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InputInfo1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InputInfo1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
