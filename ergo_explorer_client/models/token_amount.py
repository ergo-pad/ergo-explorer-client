# coding: utf-8

"""
    Ergo Explorer API v1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TokenAmount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token_id': 'str',
        'amount': 'int',
        'decimals': 'int',
        'name': 'str',
        'token_type': 'str'
    }

    attribute_map = {
        'token_id': 'tokenId',
        'amount': 'amount',
        'decimals': 'decimals',
        'name': 'name',
        'token_type': 'tokenType'
    }

    def __init__(self, token_id=None, amount=None, decimals=None, name=None, token_type=None):  # noqa: E501
        """TokenAmount - a model defined in Swagger"""  # noqa: E501
        self._token_id = None
        self._amount = None
        self._decimals = None
        self._name = None
        self._token_type = None
        self.discriminator = None
        self.token_id = token_id
        self.amount = amount
        self.decimals = decimals
        if name is not None:
            self.name = name
        if token_type is not None:
            self.token_type = token_type

    @property
    def token_id(self):
        """Gets the token_id of this TokenAmount.  # noqa: E501

        Token ID  # noqa: E501

        :return: The token_id of this TokenAmount.  # noqa: E501
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this TokenAmount.

        Token ID  # noqa: E501

        :param token_id: The token_id of this TokenAmount.  # noqa: E501
        :type: str
        """
        if token_id is None:
            raise ValueError("Invalid value for `token_id`, must not be `None`")  # noqa: E501

        self._token_id = token_id

    @property
    def amount(self):
        """Gets the amount of this TokenAmount.  # noqa: E501

        Token amount  # noqa: E501

        :return: The amount of this TokenAmount.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TokenAmount.

        Token amount  # noqa: E501

        :param amount: The amount of this TokenAmount.  # noqa: E501
        :type: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def decimals(self):
        """Gets the decimals of this TokenAmount.  # noqa: E501

        Number of decimals  # noqa: E501

        :return: The decimals of this TokenAmount.  # noqa: E501
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this TokenAmount.

        Number of decimals  # noqa: E501

        :param decimals: The decimals of this TokenAmount.  # noqa: E501
        :type: int
        """
        if decimals is None:
            raise ValueError("Invalid value for `decimals`, must not be `None`")  # noqa: E501

        self._decimals = decimals

    @property
    def name(self):
        """Gets the name of this TokenAmount.  # noqa: E501

        Token name  # noqa: E501

        :return: The name of this TokenAmount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TokenAmount.

        Token name  # noqa: E501

        :param name: The name of this TokenAmount.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def token_type(self):
        """Gets the token_type of this TokenAmount.  # noqa: E501

        Asset type (token standard)  # noqa: E501

        :return: The token_type of this TokenAmount.  # noqa: E501
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this TokenAmount.

        Asset type (token standard)  # noqa: E501

        :param token_type: The token_type of this TokenAmount.  # noqa: E501
        :type: str
        """

        self._token_type = token_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenAmount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenAmount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
