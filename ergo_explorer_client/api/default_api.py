# coding: utf-8

"""
    Ergo Explorer API v1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_api_v1_addresses_p1_balance_confirmed(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_addresses_p1_balance_confirmed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_addresses_p1_balance_confirmed(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int min_confirmations:
        :return: Balance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_addresses_p1_balance_confirmed_with_http_info(p1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_addresses_p1_balance_confirmed_with_http_info(p1, **kwargs)  # noqa: E501
            return data

    def get_api_v1_addresses_p1_balance_confirmed_with_http_info(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_addresses_p1_balance_confirmed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_addresses_p1_balance_confirmed_with_http_info(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int min_confirmations:
        :return: Balance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['p1', 'min_confirmations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_addresses_p1_balance_confirmed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'p1' is set
        if ('p1' not in params or
                params['p1'] is None):
            raise ValueError("Missing the required parameter `p1` when calling `get_api_v1_addresses_p1_balance_confirmed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'p1' in params:
            path_params['p1'] = params['p1']  # noqa: E501

        query_params = []
        if 'min_confirmations' in params:
            query_params.append(('minConfirmations', params['min_confirmations']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addresses/{p1}/balance/confirmed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Balance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_addresses_p1_balance_total(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_addresses_p1_balance_total  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_addresses_p1_balance_total(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :return: TotalBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_addresses_p1_balance_total_with_http_info(p1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_addresses_p1_balance_total_with_http_info(p1, **kwargs)  # noqa: E501
            return data

    def get_api_v1_addresses_p1_balance_total_with_http_info(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_addresses_p1_balance_total  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_addresses_p1_balance_total_with_http_info(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :return: TotalBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['p1']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_addresses_p1_balance_total" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'p1' is set
        if ('p1' not in params or
                params['p1'] is None):
            raise ValueError("Missing the required parameter `p1` when calling `get_api_v1_addresses_p1_balance_total`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'p1' in params:
            path_params['p1'] = params['p1']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addresses/{p1}/balance/total', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TotalBalance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_addresses_p1_transactions(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_addresses_p1_transactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_addresses_p1_transactions(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int offset:
        :param int limit:
        :param bool concise: Display only address inputs/outputs in transaction
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_addresses_p1_transactions_with_http_info(p1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_addresses_p1_transactions_with_http_info(p1, **kwargs)  # noqa: E501
            return data

    def get_api_v1_addresses_p1_transactions_with_http_info(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_addresses_p1_transactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_addresses_p1_transactions_with_http_info(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int offset:
        :param int limit:
        :param bool concise: Display only address inputs/outputs in transaction
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['p1', 'offset', 'limit', 'concise']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_addresses_p1_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'p1' is set
        if ('p1' not in params or
                params['p1'] is None):
            raise ValueError("Missing the required parameter `p1` when calling `get_api_v1_addresses_p1_transactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'p1' in params:
            path_params['p1'] = params['p1']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'concise' in params:
            query_params.append(('concise', params['concise']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addresses/{p1}/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemsA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_assets(self, **kwargs):  # noqa: E501
        """get_api_v1_assets  # noqa: E501

        Use '/tokens' instead  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_assets(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset:
        :param int limit:
        :param str sort_direction:
        :param bool hide_nfts: Exclude NFTs from result set
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_assets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_assets_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_api_v1_assets_with_http_info(self, **kwargs):  # noqa: E501
        """get_api_v1_assets  # noqa: E501

        Use '/tokens' instead  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_assets_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset:
        :param int limit:
        :param str sort_direction:
        :param bool hide_nfts: Exclude NFTs from result set
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'sort_direction', 'hide_nfts']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_assets" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sortDirection', params['sort_direction']))  # noqa: E501
        if 'hide_nfts' in params:
            query_params.append(('hideNfts', params['hide_nfts']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/assets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemsA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_assets_search_bytokenid(self, query, **kwargs):  # noqa: E501
        """get_api_v1_assets_search_bytokenid  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_assets_search_bytokenid(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: (required)
        :param int offset:
        :param int limit:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_assets_search_bytokenid_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_assets_search_bytokenid_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def get_api_v1_assets_search_bytokenid_with_http_info(self, query, **kwargs):  # noqa: E501
        """get_api_v1_assets_search_bytokenid  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_assets_search_bytokenid_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: (required)
        :param int offset:
        :param int limit:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_assets_search_bytokenid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `get_api_v1_assets_search_bytokenid`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/assets/search/byTokenId', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemsA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_blocks(self, **kwargs):  # noqa: E501
        """get_api_v1_blocks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_blocks(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset:
        :param int limit:
        :param str sort_by:
        :param str sort_direction:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_blocks_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_blocks_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_api_v1_blocks_with_http_info(self, **kwargs):  # noqa: E501
        """get_api_v1_blocks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_blocks_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset:
        :param int limit:
        :param str sort_by:
        :param str sort_direction:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'sort_by', 'sort_direction']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_blocks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sortDirection', params['sort_direction']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/blocks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemsA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_blocks_byglobalindex_stream(self, min_gix, limit, **kwargs):  # noqa: E501
        """get_api_v1_blocks_byglobalindex_stream  # noqa: E501

        Get a stream of blocks ordered by global index (height)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_blocks_byglobalindex_stream(min_gix, limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int min_gix: Min global index (in blockchain) of an on-chain entity (required)
        :param int limit: (required)
        :return: ListBlockInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_blocks_byglobalindex_stream_with_http_info(min_gix, limit, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_blocks_byglobalindex_stream_with_http_info(min_gix, limit, **kwargs)  # noqa: E501
            return data

    def get_api_v1_blocks_byglobalindex_stream_with_http_info(self, min_gix, limit, **kwargs):  # noqa: E501
        """get_api_v1_blocks_byglobalindex_stream  # noqa: E501

        Get a stream of blocks ordered by global index (height)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_blocks_byglobalindex_stream_with_http_info(min_gix, limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int min_gix: Min global index (in blockchain) of an on-chain entity (required)
        :param int limit: (required)
        :return: ListBlockInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['min_gix', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_blocks_byglobalindex_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'min_gix' is set
        if ('min_gix' not in params or
                params['min_gix'] is None):
            raise ValueError("Missing the required parameter `min_gix` when calling `get_api_v1_blocks_byglobalindex_stream`")  # noqa: E501
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `get_api_v1_blocks_byglobalindex_stream`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'min_gix' in params:
            query_params.append(('minGix', params['min_gix']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/blocks/byGlobalIndex/stream', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListBlockInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_blocks_headers(self, **kwargs):  # noqa: E501
        """get_api_v1_blocks_headers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_blocks_headers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset:
        :param int limit:
        :param str sort_by:
        :param str sort_direction:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_blocks_headers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_blocks_headers_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_api_v1_blocks_headers_with_http_info(self, **kwargs):  # noqa: E501
        """get_api_v1_blocks_headers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_blocks_headers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset:
        :param int limit:
        :param str sort_by:
        :param str sort_direction:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'sort_by', 'sort_direction']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_blocks_headers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sortDirection', params['sort_direction']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/blocks/headers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemsA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_blocks_p1(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_blocks_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_blocks_p1(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :return: BlockSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_blocks_p1_with_http_info(p1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_blocks_p1_with_http_info(p1, **kwargs)  # noqa: E501
            return data

    def get_api_v1_blocks_p1_with_http_info(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_blocks_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_blocks_p1_with_http_info(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :return: BlockSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['p1']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_blocks_p1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'p1' is set
        if ('p1' not in params or
                params['p1'] is None):
            raise ValueError("Missing the required parameter `p1` when calling `get_api_v1_blocks_p1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'p1' in params:
            path_params['p1'] = params['p1']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/blocks/{p1}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlockSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_boxes_byaddress_p1(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_boxes_byaddress_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_byaddress_p1(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int offset:
        :param int limit:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_boxes_byaddress_p1_with_http_info(p1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_boxes_byaddress_p1_with_http_info(p1, **kwargs)  # noqa: E501
            return data

    def get_api_v1_boxes_byaddress_p1_with_http_info(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_boxes_byaddress_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_byaddress_p1_with_http_info(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int offset:
        :param int limit:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['p1', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_boxes_byaddress_p1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'p1' is set
        if ('p1' not in params or
                params['p1'] is None):
            raise ValueError("Missing the required parameter `p1` when calling `get_api_v1_boxes_byaddress_p1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'p1' in params:
            path_params['p1'] = params['p1']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boxes/byAddress/{p1}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemsA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_boxes_byergotree_p1(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_boxes_byergotree_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_byergotree_p1(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int offset:
        :param int limit:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_boxes_byergotree_p1_with_http_info(p1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_boxes_byergotree_p1_with_http_info(p1, **kwargs)  # noqa: E501
            return data

    def get_api_v1_boxes_byergotree_p1_with_http_info(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_boxes_byergotree_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_byergotree_p1_with_http_info(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int offset:
        :param int limit:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['p1', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_boxes_byergotree_p1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'p1' is set
        if ('p1' not in params or
                params['p1'] is None):
            raise ValueError("Missing the required parameter `p1` when calling `get_api_v1_boxes_byergotree_p1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'p1' in params:
            path_params['p1'] = params['p1']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boxes/byErgoTree/{p1}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemsA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_boxes_byergotreetemplatehash_p1(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_boxes_byergotreetemplatehash_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_byergotreetemplatehash_p1(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int offset:
        :param int limit:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_boxes_byergotreetemplatehash_p1_with_http_info(p1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_boxes_byergotreetemplatehash_p1_with_http_info(p1, **kwargs)  # noqa: E501
            return data

    def get_api_v1_boxes_byergotreetemplatehash_p1_with_http_info(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_boxes_byergotreetemplatehash_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_byergotreetemplatehash_p1_with_http_info(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int offset:
        :param int limit:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['p1', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_boxes_byergotreetemplatehash_p1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'p1' is set
        if ('p1' not in params or
                params['p1'] is None):
            raise ValueError("Missing the required parameter `p1` when calling `get_api_v1_boxes_byergotreetemplatehash_p1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'p1' in params:
            path_params['p1'] = params['p1']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boxes/byErgoTreeTemplateHash/{p1}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemsA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_boxes_byergotreetemplatehash_p1_stream(self, p1, min_height, max_height, **kwargs):  # noqa: E501
        """get_api_v1_boxes_byergotreetemplatehash_p1_stream  # noqa: E501

        Get a stream of unspent outputs by a hash of the given ErgoTreeTemplate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_byergotreetemplatehash_p1_stream(p1, min_height, max_height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int min_height: (required)
        :param int max_height: (required)
        :return: ListOutputInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_boxes_byergotreetemplatehash_p1_stream_with_http_info(p1, min_height, max_height, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_boxes_byergotreetemplatehash_p1_stream_with_http_info(p1, min_height, max_height, **kwargs)  # noqa: E501
            return data

    def get_api_v1_boxes_byergotreetemplatehash_p1_stream_with_http_info(self, p1, min_height, max_height, **kwargs):  # noqa: E501
        """get_api_v1_boxes_byergotreetemplatehash_p1_stream  # noqa: E501

        Get a stream of unspent outputs by a hash of the given ErgoTreeTemplate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_byergotreetemplatehash_p1_stream_with_http_info(p1, min_height, max_height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int min_height: (required)
        :param int max_height: (required)
        :return: ListOutputInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['p1', 'min_height', 'max_height']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_boxes_byergotreetemplatehash_p1_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'p1' is set
        if ('p1' not in params or
                params['p1'] is None):
            raise ValueError("Missing the required parameter `p1` when calling `get_api_v1_boxes_byergotreetemplatehash_p1_stream`")  # noqa: E501
        # verify the required parameter 'min_height' is set
        if ('min_height' not in params or
                params['min_height'] is None):
            raise ValueError("Missing the required parameter `min_height` when calling `get_api_v1_boxes_byergotreetemplatehash_p1_stream`")  # noqa: E501
        # verify the required parameter 'max_height' is set
        if ('max_height' not in params or
                params['max_height'] is None):
            raise ValueError("Missing the required parameter `max_height` when calling `get_api_v1_boxes_byergotreetemplatehash_p1_stream`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'p1' in params:
            path_params['p1'] = params['p1']  # noqa: E501

        query_params = []
        if 'min_height' in params:
            query_params.append(('minHeight', params['min_height']))  # noqa: E501
        if 'max_height' in params:
            query_params.append(('maxHeight', params['max_height']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boxes/byErgoTreeTemplateHash/{p1}/stream', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListOutputInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_boxes_byglobalindex_stream(self, min_gix, limit, **kwargs):  # noqa: E501
        """get_api_v1_boxes_byglobalindex_stream  # noqa: E501

        Get a stream of outputs ordered by global index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_byglobalindex_stream(min_gix, limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int min_gix: Min global index (in blockchain) of an on-chain entity (required)
        :param int limit: (required)
        :return: ListOutputInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_boxes_byglobalindex_stream_with_http_info(min_gix, limit, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_boxes_byglobalindex_stream_with_http_info(min_gix, limit, **kwargs)  # noqa: E501
            return data

    def get_api_v1_boxes_byglobalindex_stream_with_http_info(self, min_gix, limit, **kwargs):  # noqa: E501
        """get_api_v1_boxes_byglobalindex_stream  # noqa: E501

        Get a stream of outputs ordered by global index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_byglobalindex_stream_with_http_info(min_gix, limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int min_gix: Min global index (in blockchain) of an on-chain entity (required)
        :param int limit: (required)
        :return: ListOutputInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['min_gix', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_boxes_byglobalindex_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'min_gix' is set
        if ('min_gix' not in params or
                params['min_gix'] is None):
            raise ValueError("Missing the required parameter `min_gix` when calling `get_api_v1_boxes_byglobalindex_stream`")  # noqa: E501
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `get_api_v1_boxes_byglobalindex_stream`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'min_gix' in params:
            query_params.append(('minGix', params['min_gix']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boxes/byGlobalIndex/stream', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListOutputInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_boxes_bytokenid_p1(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_boxes_bytokenid_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_bytokenid_p1(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int offset:
        :param int limit:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_boxes_bytokenid_p1_with_http_info(p1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_boxes_bytokenid_p1_with_http_info(p1, **kwargs)  # noqa: E501
            return data

    def get_api_v1_boxes_bytokenid_p1_with_http_info(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_boxes_bytokenid_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_bytokenid_p1_with_http_info(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int offset:
        :param int limit:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['p1', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_boxes_bytokenid_p1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'p1' is set
        if ('p1' not in params or
                params['p1'] is None):
            raise ValueError("Missing the required parameter `p1` when calling `get_api_v1_boxes_bytokenid_p1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'p1' in params:
            path_params['p1'] = params['p1']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boxes/byTokenId/{p1}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemsA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_boxes_p1(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_boxes_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_p1(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :return: OutputInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_boxes_p1_with_http_info(p1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_boxes_p1_with_http_info(p1, **kwargs)  # noqa: E501
            return data

    def get_api_v1_boxes_p1_with_http_info(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_boxes_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_p1_with_http_info(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :return: OutputInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['p1']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_boxes_p1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'p1' is set
        if ('p1' not in params or
                params['p1'] is None):
            raise ValueError("Missing the required parameter `p1` when calling `get_api_v1_boxes_p1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'p1' in params:
            path_params['p1'] = params['p1']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boxes/{p1}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutputInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_boxes_unspent_byaddress_p1(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_boxes_unspent_byaddress_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_unspent_byaddress_p1(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int offset:
        :param int limit:
        :param str sort_direction:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_boxes_unspent_byaddress_p1_with_http_info(p1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_boxes_unspent_byaddress_p1_with_http_info(p1, **kwargs)  # noqa: E501
            return data

    def get_api_v1_boxes_unspent_byaddress_p1_with_http_info(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_boxes_unspent_byaddress_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_unspent_byaddress_p1_with_http_info(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int offset:
        :param int limit:
        :param str sort_direction:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['p1', 'offset', 'limit', 'sort_direction']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_boxes_unspent_byaddress_p1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'p1' is set
        if ('p1' not in params or
                params['p1'] is None):
            raise ValueError("Missing the required parameter `p1` when calling `get_api_v1_boxes_unspent_byaddress_p1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'p1' in params:
            path_params['p1'] = params['p1']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sortDirection', params['sort_direction']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boxes/unspent/byAddress/{p1}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemsA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_boxes_unspent_byergotree_p1(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_boxes_unspent_byergotree_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_unspent_byergotree_p1(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int offset:
        :param int limit:
        :param str sort_direction:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_boxes_unspent_byergotree_p1_with_http_info(p1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_boxes_unspent_byergotree_p1_with_http_info(p1, **kwargs)  # noqa: E501
            return data

    def get_api_v1_boxes_unspent_byergotree_p1_with_http_info(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_boxes_unspent_byergotree_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_unspent_byergotree_p1_with_http_info(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int offset:
        :param int limit:
        :param str sort_direction:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['p1', 'offset', 'limit', 'sort_direction']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_boxes_unspent_byergotree_p1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'p1' is set
        if ('p1' not in params or
                params['p1'] is None):
            raise ValueError("Missing the required parameter `p1` when calling `get_api_v1_boxes_unspent_byergotree_p1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'p1' in params:
            path_params['p1'] = params['p1']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sortDirection', params['sort_direction']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boxes/unspent/byErgoTree/{p1}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemsA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_boxes_unspent_byergotreetemplatehash_p1(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_boxes_unspent_byergotreetemplatehash_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_unspent_byergotreetemplatehash_p1(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int offset:
        :param int limit:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_boxes_unspent_byergotreetemplatehash_p1_with_http_info(p1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_boxes_unspent_byergotreetemplatehash_p1_with_http_info(p1, **kwargs)  # noqa: E501
            return data

    def get_api_v1_boxes_unspent_byergotreetemplatehash_p1_with_http_info(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_boxes_unspent_byergotreetemplatehash_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_unspent_byergotreetemplatehash_p1_with_http_info(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int offset:
        :param int limit:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['p1', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_boxes_unspent_byergotreetemplatehash_p1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'p1' is set
        if ('p1' not in params or
                params['p1'] is None):
            raise ValueError("Missing the required parameter `p1` when calling `get_api_v1_boxes_unspent_byergotreetemplatehash_p1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'p1' in params:
            path_params['p1'] = params['p1']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boxes/unspent/byErgoTreeTemplateHash/{p1}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemsA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_boxes_unspent_byergotreetemplatehash_p1_stream(self, p1, min_height, max_height, **kwargs):  # noqa: E501
        """get_api_v1_boxes_unspent_byergotreetemplatehash_p1_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_unspent_byergotreetemplatehash_p1_stream(p1, min_height, max_height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int min_height: (required)
        :param int max_height: (required)
        :return: ListOutputInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_boxes_unspent_byergotreetemplatehash_p1_stream_with_http_info(p1, min_height, max_height, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_boxes_unspent_byergotreetemplatehash_p1_stream_with_http_info(p1, min_height, max_height, **kwargs)  # noqa: E501
            return data

    def get_api_v1_boxes_unspent_byergotreetemplatehash_p1_stream_with_http_info(self, p1, min_height, max_height, **kwargs):  # noqa: E501
        """get_api_v1_boxes_unspent_byergotreetemplatehash_p1_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_unspent_byergotreetemplatehash_p1_stream_with_http_info(p1, min_height, max_height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int min_height: (required)
        :param int max_height: (required)
        :return: ListOutputInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['p1', 'min_height', 'max_height']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_boxes_unspent_byergotreetemplatehash_p1_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'p1' is set
        if ('p1' not in params or
                params['p1'] is None):
            raise ValueError("Missing the required parameter `p1` when calling `get_api_v1_boxes_unspent_byergotreetemplatehash_p1_stream`")  # noqa: E501
        # verify the required parameter 'min_height' is set
        if ('min_height' not in params or
                params['min_height'] is None):
            raise ValueError("Missing the required parameter `min_height` when calling `get_api_v1_boxes_unspent_byergotreetemplatehash_p1_stream`")  # noqa: E501
        # verify the required parameter 'max_height' is set
        if ('max_height' not in params or
                params['max_height'] is None):
            raise ValueError("Missing the required parameter `max_height` when calling `get_api_v1_boxes_unspent_byergotreetemplatehash_p1_stream`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'p1' in params:
            path_params['p1'] = params['p1']  # noqa: E501

        query_params = []
        if 'min_height' in params:
            query_params.append(('minHeight', params['min_height']))  # noqa: E501
        if 'max_height' in params:
            query_params.append(('maxHeight', params['max_height']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boxes/unspent/byErgoTreeTemplateHash/{p1}/stream', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListOutputInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_boxes_unspent_byglobalindex_stream(self, min_gix, limit, **kwargs):  # noqa: E501
        """get_api_v1_boxes_unspent_byglobalindex_stream  # noqa: E501

        Get a stream of unspent outputs ordered by global index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_unspent_byglobalindex_stream(min_gix, limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int min_gix: Min global index (in blockchain) of an on-chain entity (required)
        :param int limit: (required)
        :return: ListOutputInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_boxes_unspent_byglobalindex_stream_with_http_info(min_gix, limit, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_boxes_unspent_byglobalindex_stream_with_http_info(min_gix, limit, **kwargs)  # noqa: E501
            return data

    def get_api_v1_boxes_unspent_byglobalindex_stream_with_http_info(self, min_gix, limit, **kwargs):  # noqa: E501
        """get_api_v1_boxes_unspent_byglobalindex_stream  # noqa: E501

        Get a stream of unspent outputs ordered by global index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_unspent_byglobalindex_stream_with_http_info(min_gix, limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int min_gix: Min global index (in blockchain) of an on-chain entity (required)
        :param int limit: (required)
        :return: ListOutputInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['min_gix', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_boxes_unspent_byglobalindex_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'min_gix' is set
        if ('min_gix' not in params or
                params['min_gix'] is None):
            raise ValueError("Missing the required parameter `min_gix` when calling `get_api_v1_boxes_unspent_byglobalindex_stream`")  # noqa: E501
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `get_api_v1_boxes_unspent_byglobalindex_stream`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'min_gix' in params:
            query_params.append(('minGix', params['min_gix']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boxes/unspent/byGlobalIndex/stream', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListOutputInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_boxes_unspent_bylastepochs_stream(self, last_epochs, **kwargs):  # noqa: E501
        """get_api_v1_boxes_unspent_bylastepochs_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_unspent_bylastepochs_stream(last_epochs, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int last_epochs: (required)
        :return: ListOutputInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_boxes_unspent_bylastepochs_stream_with_http_info(last_epochs, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_boxes_unspent_bylastepochs_stream_with_http_info(last_epochs, **kwargs)  # noqa: E501
            return data

    def get_api_v1_boxes_unspent_bylastepochs_stream_with_http_info(self, last_epochs, **kwargs):  # noqa: E501
        """get_api_v1_boxes_unspent_bylastepochs_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_unspent_bylastepochs_stream_with_http_info(last_epochs, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int last_epochs: (required)
        :return: ListOutputInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['last_epochs']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_boxes_unspent_bylastepochs_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'last_epochs' is set
        if ('last_epochs' not in params or
                params['last_epochs'] is None):
            raise ValueError("Missing the required parameter `last_epochs` when calling `get_api_v1_boxes_unspent_bylastepochs_stream`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'last_epochs' in params:
            query_params.append(('lastEpochs', params['last_epochs']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boxes/unspent/byLastEpochs/stream', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListOutputInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_boxes_unspent_bytokenid_p1(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_boxes_unspent_bytokenid_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_unspent_bytokenid_p1(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int offset:
        :param int limit:
        :param str sort_direction:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_boxes_unspent_bytokenid_p1_with_http_info(p1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_boxes_unspent_bytokenid_p1_with_http_info(p1, **kwargs)  # noqa: E501
            return data

    def get_api_v1_boxes_unspent_bytokenid_p1_with_http_info(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_boxes_unspent_bytokenid_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_unspent_bytokenid_p1_with_http_info(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int offset:
        :param int limit:
        :param str sort_direction:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['p1', 'offset', 'limit', 'sort_direction']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_boxes_unspent_bytokenid_p1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'p1' is set
        if ('p1' not in params or
                params['p1'] is None):
            raise ValueError("Missing the required parameter `p1` when calling `get_api_v1_boxes_unspent_bytokenid_p1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'p1' in params:
            path_params['p1'] = params['p1']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sortDirection', params['sort_direction']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boxes/unspent/byTokenId/{p1}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemsA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_boxes_unspent_stream(self, min_height, max_height, **kwargs):  # noqa: E501
        """get_api_v1_boxes_unspent_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_unspent_stream(min_height, max_height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int min_height: (required)
        :param int max_height: (required)
        :return: ListOutputInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_boxes_unspent_stream_with_http_info(min_height, max_height, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_boxes_unspent_stream_with_http_info(min_height, max_height, **kwargs)  # noqa: E501
            return data

    def get_api_v1_boxes_unspent_stream_with_http_info(self, min_height, max_height, **kwargs):  # noqa: E501
        """get_api_v1_boxes_unspent_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_boxes_unspent_stream_with_http_info(min_height, max_height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int min_height: (required)
        :param int max_height: (required)
        :return: ListOutputInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['min_height', 'max_height']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_boxes_unspent_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'min_height' is set
        if ('min_height' not in params or
                params['min_height'] is None):
            raise ValueError("Missing the required parameter `min_height` when calling `get_api_v1_boxes_unspent_stream`")  # noqa: E501
        # verify the required parameter 'max_height' is set
        if ('max_height' not in params or
                params['max_height'] is None):
            raise ValueError("Missing the required parameter `max_height` when calling `get_api_v1_boxes_unspent_stream`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'min_height' in params:
            query_params.append(('minHeight', params['min_height']))  # noqa: E501
        if 'max_height' in params:
            query_params.append(('maxHeight', params['max_height']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boxes/unspent/stream', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListOutputInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_epochs_params(self, **kwargs):  # noqa: E501
        """get_api_v1_epochs_params  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_epochs_params(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: EpochInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_epochs_params_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_epochs_params_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_api_v1_epochs_params_with_http_info(self, **kwargs):  # noqa: E501
        """get_api_v1_epochs_params  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_epochs_params_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: EpochInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_epochs_params" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/epochs/params', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EpochInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_info(self, **kwargs):  # noqa: E501
        """get_api_v1_info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NetworkState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_api_v1_info_with_http_info(self, **kwargs):  # noqa: E501
        """get_api_v1_info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_info_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NetworkState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_mempool_boxes_unspent(self, **kwargs):  # noqa: E501
        """get_api_v1_mempool_boxes_unspent  # noqa: E501

        Get a stream of unspent outputs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_mempool_boxes_unspent(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ListOutputInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_mempool_boxes_unspent_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_mempool_boxes_unspent_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_api_v1_mempool_boxes_unspent_with_http_info(self, **kwargs):  # noqa: E501
        """get_api_v1_mempool_boxes_unspent  # noqa: E501

        Get a stream of unspent outputs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_mempool_boxes_unspent_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ListOutputInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_mempool_boxes_unspent" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/mempool/boxes/unspent', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListOutputInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_mempool_transactions_byaddress_p1(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_mempool_transactions_byaddress_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_mempool_transactions_byaddress_p1(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int offset:
        :param int limit:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_mempool_transactions_byaddress_p1_with_http_info(p1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_mempool_transactions_byaddress_p1_with_http_info(p1, **kwargs)  # noqa: E501
            return data

    def get_api_v1_mempool_transactions_byaddress_p1_with_http_info(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_mempool_transactions_byaddress_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_mempool_transactions_byaddress_p1_with_http_info(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int offset:
        :param int limit:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['p1', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_mempool_transactions_byaddress_p1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'p1' is set
        if ('p1' not in params or
                params['p1'] is None):
            raise ValueError("Missing the required parameter `p1` when calling `get_api_v1_mempool_transactions_byaddress_p1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'p1' in params:
            path_params['p1'] = params['p1']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/mempool/transactions/byAddress/{p1}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemsA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_networkstate(self, **kwargs):  # noqa: E501
        """get_api_v1_networkstate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_networkstate(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NetworkState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_networkstate_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_networkstate_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_api_v1_networkstate_with_http_info(self, **kwargs):  # noqa: E501
        """get_api_v1_networkstate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_networkstate_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NetworkState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_networkstate" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/networkState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_networkstats(self, **kwargs):  # noqa: E501
        """get_api_v1_networkstats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_networkstats(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NetworkStats
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_networkstats_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_networkstats_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_api_v1_networkstats_with_http_info(self, **kwargs):  # noqa: E501
        """get_api_v1_networkstats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_networkstats_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NetworkStats
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_networkstats" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/networkStats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkStats',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_tokens(self, **kwargs):  # noqa: E501
        """get_api_v1_tokens  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_tokens(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset:
        :param int limit:
        :param str sort_direction:
        :param bool hide_nfts: Exclude NFTs from result set
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_tokens_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_tokens_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_api_v1_tokens_with_http_info(self, **kwargs):  # noqa: E501
        """get_api_v1_tokens  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_tokens_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset:
        :param int limit:
        :param str sort_direction:
        :param bool hide_nfts: Exclude NFTs from result set
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'sort_direction', 'hide_nfts']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_tokens" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sortDirection', params['sort_direction']))  # noqa: E501
        if 'hide_nfts' in params:
            query_params.append(('hideNfts', params['hide_nfts']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tokens', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemsA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_tokens_bysymbol_p1(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_tokens_bysymbol_p1  # noqa: E501

        Get all assets with a given Symbol. Note that symbols aren't unique.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_tokens_bysymbol_p1(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :return: list[TokenInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_tokens_bysymbol_p1_with_http_info(p1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_tokens_bysymbol_p1_with_http_info(p1, **kwargs)  # noqa: E501
            return data

    def get_api_v1_tokens_bysymbol_p1_with_http_info(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_tokens_bysymbol_p1  # noqa: E501

        Get all assets with a given Symbol. Note that symbols aren't unique.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_tokens_bysymbol_p1_with_http_info(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :return: list[TokenInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['p1']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_tokens_bysymbol_p1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'p1' is set
        if ('p1' not in params or
                params['p1'] is None):
            raise ValueError("Missing the required parameter `p1` when calling `get_api_v1_tokens_bysymbol_p1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'p1' in params:
            path_params['p1'] = params['p1']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tokens/bySymbol/{p1}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TokenInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_tokens_p1(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_tokens_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_tokens_p1(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :return: TokenInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_tokens_p1_with_http_info(p1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_tokens_p1_with_http_info(p1, **kwargs)  # noqa: E501
            return data

    def get_api_v1_tokens_p1_with_http_info(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_tokens_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_tokens_p1_with_http_info(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :return: TokenInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['p1']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_tokens_p1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'p1' is set
        if ('p1' not in params or
                params['p1'] is None):
            raise ValueError("Missing the required parameter `p1` when calling `get_api_v1_tokens_p1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'p1' in params:
            path_params['p1'] = params['p1']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tokens/{p1}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_tokens_search(self, query, **kwargs):  # noqa: E501
        """get_api_v1_tokens_search  # noqa: E501

        Search by ID or Symbol of an asset. Note that symbols aren't unique.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_tokens_search(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: (required)
        :param int offset:
        :param int limit:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_tokens_search_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_tokens_search_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def get_api_v1_tokens_search_with_http_info(self, query, **kwargs):  # noqa: E501
        """get_api_v1_tokens_search  # noqa: E501

        Search by ID or Symbol of an asset. Note that symbols aren't unique.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_tokens_search_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: (required)
        :param int offset:
        :param int limit:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_tokens_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `get_api_v1_tokens_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tokens/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemsA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_transactions_byglobalindex_stream(self, min_gix, limit, **kwargs):  # noqa: E501
        """get_api_v1_transactions_byglobalindex_stream  # noqa: E501

        Get a stream of transactions ordered by global index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_transactions_byglobalindex_stream(min_gix, limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int min_gix: Min global index (in blockchain) of the TX (required)
        :param int limit: (required)
        :return: ListTransactionInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_transactions_byglobalindex_stream_with_http_info(min_gix, limit, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_transactions_byglobalindex_stream_with_http_info(min_gix, limit, **kwargs)  # noqa: E501
            return data

    def get_api_v1_transactions_byglobalindex_stream_with_http_info(self, min_gix, limit, **kwargs):  # noqa: E501
        """get_api_v1_transactions_byglobalindex_stream  # noqa: E501

        Get a stream of transactions ordered by global index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_transactions_byglobalindex_stream_with_http_info(min_gix, limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int min_gix: Min global index (in blockchain) of the TX (required)
        :param int limit: (required)
        :return: ListTransactionInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['min_gix', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_transactions_byglobalindex_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'min_gix' is set
        if ('min_gix' not in params or
                params['min_gix'] is None):
            raise ValueError("Missing the required parameter `min_gix` when calling `get_api_v1_transactions_byglobalindex_stream`")  # noqa: E501
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `get_api_v1_transactions_byglobalindex_stream`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'min_gix' in params:
            query_params.append(('minGix', params['min_gix']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/transactions/byGlobalIndex/stream', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListTransactionInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_transactions_byinputsscripttemplatehash_p1(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_transactions_byinputsscripttemplatehash_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_transactions_byinputsscripttemplatehash_p1(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int offset:
        :param int limit:
        :param str sort_direction:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_transactions_byinputsscripttemplatehash_p1_with_http_info(p1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_transactions_byinputsscripttemplatehash_p1_with_http_info(p1, **kwargs)  # noqa: E501
            return data

    def get_api_v1_transactions_byinputsscripttemplatehash_p1_with_http_info(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_transactions_byinputsscripttemplatehash_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_transactions_byinputsscripttemplatehash_p1_with_http_info(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :param int offset:
        :param int limit:
        :param str sort_direction:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['p1', 'offset', 'limit', 'sort_direction']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_transactions_byinputsscripttemplatehash_p1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'p1' is set
        if ('p1' not in params or
                params['p1'] is None):
            raise ValueError("Missing the required parameter `p1` when calling `get_api_v1_transactions_byinputsscripttemplatehash_p1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'p1' in params:
            path_params['p1'] = params['p1']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sortDirection', params['sort_direction']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/transactions/byInputsScriptTemplateHash/{p1}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemsA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_transactions_p1(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_transactions_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_transactions_p1(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :return: TransactionInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_transactions_p1_with_http_info(p1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_transactions_p1_with_http_info(p1, **kwargs)  # noqa: E501
            return data

    def get_api_v1_transactions_p1_with_http_info(self, p1, **kwargs):  # noqa: E501
        """get_api_v1_transactions_p1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_transactions_p1_with_http_info(p1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str p1: (required)
        :return: TransactionInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['p1']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_transactions_p1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'p1' is set
        if ('p1' not in params or
                params['p1'] is None):
            raise ValueError("Missing the required parameter `p1` when calling `get_api_v1_transactions_p1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'p1' in params:
            path_params['p1'] = params['p1']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/transactions/{p1}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_api_v1_boxes_search(self, body, **kwargs):  # noqa: E501
        """post_api_v1_boxes_search  # noqa: E501

        Detailed search among all boxes in the chain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_api_v1_boxes_search(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BoxQuery body: (required)
        :param int offset:
        :param int limit:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_api_v1_boxes_search_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_api_v1_boxes_search_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_api_v1_boxes_search_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_api_v1_boxes_search  # noqa: E501

        Detailed search among all boxes in the chain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_api_v1_boxes_search_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BoxQuery body: (required)
        :param int offset:
        :param int limit:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_api_v1_boxes_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_api_v1_boxes_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boxes/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemsA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_api_v1_boxes_unspent_search(self, body, **kwargs):  # noqa: E501
        """post_api_v1_boxes_unspent_search  # noqa: E501

        Detailed search among UTXO set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_api_v1_boxes_unspent_search(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BoxQuery body: (required)
        :param int offset:
        :param int limit:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_api_v1_boxes_unspent_search_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_api_v1_boxes_unspent_search_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_api_v1_boxes_unspent_search_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_api_v1_boxes_unspent_search  # noqa: E501

        Detailed search among UTXO set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_api_v1_boxes_unspent_search_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BoxQuery body: (required)
        :param int offset:
        :param int limit:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_api_v1_boxes_unspent_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_api_v1_boxes_unspent_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boxes/unspent/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemsA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_api_v1_boxes_unspent_search_union(self, body, **kwargs):  # noqa: E501
        """post_api_v1_boxes_unspent_search_union  # noqa: E501

        Search among UTXO set by ergoTreeTemplateHash and tokens. The resulted UTXOs will contain at lest one of the given tokens.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_api_v1_boxes_unspent_search_union(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BoxAssetsQuery body: (required)
        :param int offset:
        :param int limit:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_api_v1_boxes_unspent_search_union_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_api_v1_boxes_unspent_search_union_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_api_v1_boxes_unspent_search_union_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_api_v1_boxes_unspent_search_union  # noqa: E501

        Search among UTXO set by ergoTreeTemplateHash and tokens. The resulted UTXOs will contain at lest one of the given tokens.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_api_v1_boxes_unspent_search_union_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BoxAssetsQuery body: (required)
        :param int offset:
        :param int limit:
        :return: ItemsA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_api_v1_boxes_unspent_search_union" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_api_v1_boxes_unspent_search_union`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boxes/unspent/search/union', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemsA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_api_v1_mempool_transactions_submit(self, body, **kwargs):  # noqa: E501
        """post_api_v1_mempool_transactions_submit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_api_v1_mempool_transactions_submit(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :return: TxIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_api_v1_mempool_transactions_submit_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_api_v1_mempool_transactions_submit_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_api_v1_mempool_transactions_submit_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_api_v1_mempool_transactions_submit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_api_v1_mempool_transactions_submit_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :return: TxIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_api_v1_mempool_transactions_submit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_api_v1_mempool_transactions_submit`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/mempool/transactions/submit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TxIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
